//@execute 0=1;1=2;2=1;3=2
type Either<T, U> #unboxed {
	case Left(val: T);
	case Right(val: U);
}

def f<T, U>(a: Either<T, U>) -> int {
	match (a) {
		Left(val) => return 1;
		Right(val) => return 2;
	}
}

def g<T, U>(a: Either<T, U>, b: Either<T, U>) -> bool {
	return a == b;
}

def main(i: int) -> int {
	var a = Either<int, bool>.Left(12);
	var b = Either<int, bool>.Right(false);

	var c = Either<u64, i32>.Left(123ul);
	var d = Either<u64, i32>.Right(123);

	match (i) {
		0 => return f(a);
		1 => return f(b);
		2 => return f(c);
		3 => return f(d);
	}
	return 0;
}