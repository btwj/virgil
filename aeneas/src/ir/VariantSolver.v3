// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

enum Scalar(size: byte, ty: Type) {
	B32(32, Int.getType(true, 32)),
	B64(64, Int.getType(true, 64)),
	B128(128, null), // TODO
	R32(32, AnyRef.TYPE),
	R64(64, AnyRef.TYPE),
	Ref(64, AnyRef.TYPE),
	F32(32, Float.FLOAT32),
	F64(64, Float.FLOAT64)
}

def getTypeFromScalarSet(s: Scalar.set) -> Type {
	for (i in s) return i.ty;
	return null;
}

class VariantNorm extends TypeNorm {
	def fields: Array<VariantField>;
	var vecO: Array<Type>;

	def tag: VariantField;
	var tagValue: int = -1;

	// for each field, this is the start + end index when ClassAlloc is called
	var fieldRanges: Array<(int, int)>;
	var children: List<VariantNorm>;

	new(oldType: Type, newType: Type, sub: Array<Type>, fields, tag)
		super(oldType, newType, sub) {}

	// represent empty variant as tag
	def isEnum() -> bool { return size == 1 && tag != null && fields.length == 0; }
	def isEnumCase() -> bool { return size == 1 && tag != null && tagValue >= 0 && fields.length == 0; }

	def tagType() -> IntType { return IntType.!(tag.tn.first()); }
	def tagIndex() -> int { return tag.indexes[0]; }
	
	// represent single-case, unboxed variant without its tag
	def isTagless() -> bool { return tag == null; }

	def render(buf: StringBuilder) -> StringBuilder {
		buf.put3("%q ## %q |%d|", oldType.render, newType.render, size);
		buf.puts(" [");
		for (i < sub.length) {
			if (i > 0) buf.csp();
			sub[i].render(buf);
		}
		buf.puts("] {");
		if (tag != null) {
			buf.put1("tag: %q", tag.render);
		}
		for (i < fields.length) {
			if (i > 0 || tag != null) buf.csp();
			fields[i].render(buf);
		}
		buf.puts("}");
		return buf;
	}
}

component VariantSsaGen {
	def genVariantScalarView(curBlock: SsaBuilder, oldType: Type, newType: Type, scalar: SsaInstr) -> SsaInstr {
		if (IntType.?(newType)) return curBlock.opIntView(oldType, IntType.!(newType), scalar);
		if (IntType.?(oldType)) {
			match (newType) {
				x: FloatType => {
					var op = if(x.is64, V3Op.newFloat64ViewI(oldType), V3Op.newFloat32ViewI(oldType));
					return curBlock.add(op, [scalar], Fact.O_PURE);
				}
			}
		}
		if (newType == AnyRef.TYPE) return scalar;
		return curBlock.opTypeSubsume(oldType, newType, scalar);
	}

	def buildClassAlloc(graph: SsaGraph, curBlock: SsaBuilder, vn: VariantNorm, inputs: Array<SsaInstr>) -> Array<SsaInstr> {
		var result = Array<SsaInstr>.new(vn.size);
		for (i < result.length) result[i] = graph.nullConst(vn.sub[i]);

		if (!vn.isTagless()) result[vn.tagIndex()] = graph.intConst(vn.tagValue);

		for (i < vn.fields.length) {
			var f = vn.fields[i];
			var fieldRanges = vn.fieldRanges[i], os = fieldRanges.0;
			for (j < f.indexes.length) {
				var idx = f.indexes[j];
				result[idx] = genVariantScalarView(curBlock, f.tn.at(j), vn.at(idx), inputs[os + j]);
			}
		}
		return result;
	}
}

// Metadata about a variant's fields before/after normalization
class VariantField {
	def tn: TypeNorm;
	def indexes: Array<int>; // Indexes into the variant's representation to extract the field from

	new(tn, indexes) {}

	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts("(");
		for (i < indexes.length) {
			if (i > 0) buf.csp();
			buf.put1("#%d", indexes[i]);
		}
		buf.puts(")");
		if (tn != null) buf.put1(": [%q]", tn.newType.render);
		return buf;
	}
}

def ON_STACK = -1;
def EMPTY_FIELD = VariantField.new(null, []);
def NO_FIELDS = Array<VariantField>.new(0);

class VariantNormalizer(nc: NormalizerConfig, rn: ReachabilityNormalizer, verbose: bool) {
	// Normalizes a non-recursive variant, returns either a VariantNorm for an unboxed variant,
	// or a simple TypeNorm for a boxed variant
	def normVariant(t: Type, rc: RaClass) -> TypeNorm {
		if (rc.variantNorm != null) return rc.variantNorm;
		if (rc.orig.boxing == Boxing.BOXED) rn.mapSimple(t);

		var prev = rc.recursive;
		match (rc.recursive) {
			ON_STACK => {
				rc.recursive = 2; // cycle detected; box
			}
			0 => {
				rc.recursive = ON_STACK;
				tryUnboxing(rc);
				if (rc.recursive == ON_STACK) rc.recursive = 1;
				if (rc.variantNorm != null) return rc.variantNorm;
			}
		}
		return rn.mapSimple(t); 
	}
	// Try to unbox a variant in one of three ways:
	// 1. If a (non-closure) variant has all empty fields in all cases, represent it as a single uN tag (enum representation).
	// 2. If a variant has only one case, represent it as a tagless tuple of scalars (data representation).
	// 3. If a variant has multiple cases and is marked #unboxed, use a flattened representation with the smallest set of scalars.
	private def tryUnboxing(rc: RaClass) -> bool {
		if (rc.variantNorm != null) return true; // already done
		while (rc.parent != null) rc = rc.parent;
		
		rn.makeNormFields(rc);

		var isEmpty = rc.normFields.length == 0;
		var closure = rc.raFacts.RC_CLOSURE;

		for (l = rc.children; l != null; l = l.tail) {
			var c = l.head;
			rn.makeNormFields(c);
			if (c.normFields.length > 0) isEmpty = false;
			closure |= c.raFacts.RC_CLOSURE;
		}

		if (isEmpty && !closure) {
			// normalize empty variant to just its tag; i.e. become an enum
			var tagType = V3.getVariantTagType(rc.oldType);
			var tagTypeNorm = rn.norm(tagType);
			var tagField = VariantField.new(tagTypeNorm, [0]);
			unboxUsingEnumVariantNorm(rc, tagType, tagField);
			return true;
		}
		if (rc.children != null) {
			// multi-case variant unboxing
			if (closure) return false;
			match (rc.orig.boxing) {
				BOXED, AUTO => return false;
				_ => return unboxUsingTaggedVariantNorm(rc);
			}
		}
		match (rc.orig.boxing) {
			BOXED => return false;
			AUTO => if (rc.normFields.length > nc.MaxFlatDataValues) return false;
			UNBOXED => ; // program specified unboxed; TODO: recursion or closure should be an error
		}
		if (rc.recursive > 1 || closure) return false; // recursive or closed over
		unboxUsingTaglessVariantNorm(rc);
		return true;
	}
	private def unboxUsingTaglessVariantNorm(rc: RaClass) {
		var ofs = rc.orig.fields;
		var fields = Array<VariantField>.new(ofs.length);
		var fieldRanges = Array<(int, int)>.new(ofs.length);

		var vecO = Vector<Type>.new();
		var vecT = Vector<Type>.new();

		for (i < ofs.length) {
			var normStart = vecT.length, origStart = vecO.length;
			var rf = rc.fields[i];
			var indexes: Array<int>;

			if (rf != null && rf.normIndex >= 0) {
				var tn = fieldNorm(rf);
				tn.addTo(vecT);

				indexes = Array<int>.new(tn.size);
				for (j < indexes.length) indexes[j] = normStart + j;
				fields[i] = VariantField.new(tn, indexes);
			} else fields[i] = EMPTY_FIELD;
			
			var fieldType = ofs[i].fieldType.substitute(V3.getTypeArgs(rc.oldType));
			rn.norm(fieldType).addTo(vecO);
			fieldRanges[i] = (origStart, vecO.length);
		}

		var ta = vecT.extract();
		var vn = VariantNorm.new(rc.oldType, Tuple.newType(Lists.fromArray(ta)), ta, fields, null);
		vn.fieldRanges = fieldRanges;
		vn.vecO = vecO.extract();
		rc.variantNorm = vn;

		if (verbose) Terminal.put1("variant norm %q\n", rc.variantNorm.render);
	}
	// Perform recursive backtracking on the potential representation.
	// With each scalar in each case, we have several choices to make:
	// 1. Merge this scalar with an existing scalar in the representation that hasn't been used by the current case.
	// 2. Append this scalar as a new scalar.
	// We can only determine distinguishability after all the scalars have been assigned. Heuristics will help speed this part up.
	var assignments: HashMap<CaseField, int>;
	private def tryRepresentationForField(curRep: Vector<Scalar.set>, curUsed: Vector<bool>, fields: Array<Array<Type>>, curCase: int, curField: int) -> bool {	
		if (curCase >= fields.length) {
			// XXX: check distinguishable
			return true; // true, since we add a tag scalar - this will change once packing is involved
		}
		if (curField >= fields[curCase].length) {
			// move on to next case
			curUsed = Vector<bool>.new();
			for (i < curRep.length) curUsed.put(false);
			return tryRepresentationForField(curRep, curUsed, fields, curCase + 1, 0);
		}
		
		var sc = nc.GetScalar(rn.ra.compiler, rn.ra.prog, fields[curCase][curField]);
		var none: Scalar.set;

		for (i < curRep.length) {
			if (curUsed[i]) continue;
			var oldRep = curRep[i];

			if ((sc & oldRep) != none) {
				curUsed[i] = true; curRep[i] = sc & oldRep;
				assignments[CaseField(curCase, curField)] = i;
				if (tryRepresentationForField(curRep, curUsed, fields, curCase, curField + 1)) return true;
				curUsed[i] = false; curRep[i] = oldRep;
			}
		}

		var len = curRep.length;
		curRep.put(sc); curUsed.put(true);
		
		assignments[CaseField(curCase, curField)] = curRep.length - 1;
		if (tryRepresentationForField(curRep, curUsed, fields, curCase, curField + 1)) return true;
		curRep.resize(len); curUsed.resize(len);

		return false;
	}
	private def unboxUsingTaggedVariantNorm(rc: RaClass) -> bool {
		var vecT = Vector<Type>.new();
		var parentUnboxed = rc.orig.boxing == Boxing.UNBOXED;

		var numChildren = Lists.length(rc.children);

		var cases = Array<(Array<VariantField>, Array<(int, int)>, Array<(int, int)>, Array<Type>)>.new(numChildren);
		var normFields = Array<Array<Type>>.new(Lists.length(rc.children));

		var caseIdx = 0;
		for (l = rc.children; l != null; l = l.tail) {
			var c = l.head;
			var ofs = c.orig.fields;

			var fields = Array<VariantField>.new(ofs.length);
			var fieldTypes = Vector<Type>.new();

			var fieldRangesO = Array<(int, int)>.new(ofs.length);
			var fieldRangesT = Array<(int, int)>.new(ofs.length);
			var vecO = Vector<Type>.new();

			for (i < ofs.length) {
				var rf = c.fields[i];
				var startT = fieldTypes.length;

				if (rf != null && rf.normIndex >= 0) {
					var tn = fieldNorm(rf);
					tn.addTo(fieldTypes);
					fields[i] = VariantField.new(tn, Array<int>.new(tn.size));
				} else fields[i] = EMPTY_FIELD;

				var origStart = vecO.length;
				var fieldType = ofs[i].fieldType.substitute(V3.getTypeArgs(rc.oldType));
				rn.norm(fieldType).addTo(vecO);
				fieldRangesO[i] = (origStart, vecO.length);
				fieldRangesT[i] = (startT, fieldTypes.length);
			}

			normFields[caseIdx] = fieldTypes.extract();
			cases[caseIdx] = (fields, fieldRangesO, fieldRangesT, vecO.extract());
			caseIdx++;
		}

		if (rc.recursive > 1) return false;
		// now that we know it's not recursive, we can safely assign the variant norm

		assignments = HashMap<CaseField, int>.new(CaseField.hash, CaseField.==);
		var curRep = Vector<Scalar.set>.new();
		var used = Vector<bool>.new();

		tryRepresentationForField(curRep, used, normFields, 0, 0);

		var tagType = V3.getVariantTagType(rc.oldType);
		var types = Array<Type>.new(curRep.length + 1);
		for (i < curRep.length) types[i] = getTypeFromScalarSet(curRep[i]);
		types[curRep.length] = tagType;

		var tagField = VariantField.new(rn.norm(tagType), [curRep.length]);
		var newType = Tuple.newType(Lists.fromArray(types));

		var parentNorm = VariantNorm.new(rc.oldType, newType, types, NO_FIELDS, tagField);
		var childrenNorms: List<VariantNorm>;
		rc.variantNorm = parentNorm;

		var children = rc.children;
		for (i < numChildren) {
			var child = children.head;
			var c = cases[i], fieldRanges = c.1, fieldRangesT = c.2, vecO = c.3;
			var ofs = child.orig.fields;

			for (j < ofs.length) {
				var rf = child.fields[j];
				if (rf != null && rf.normIndex >= 0) {
					var fr = fieldRangesT[j];
					for (k < fr.1 - fr.0) c.0[j].indexes[k] = assignments[CaseField(i, fr.0 + k)];
				}
			}

			var vn = VariantNorm.new(child.oldType, newType, types, c.0, tagField);
			vn.fieldRanges = fieldRanges;
			vn.vecO = vecO;
			vn.tagValue = V3.getVariantTag(child.oldType);
			
			child.variantNorm = vn;
			children = children.tail;
			childrenNorms = List<VariantNorm>.new(vn, childrenNorms);
		}
		
		parentNorm.children = childrenNorms;
		return true;
	}
	private def unboxUsingEnumVariantNorm(rc: RaClass, tagType: IntType, tagField: VariantField) {
		var vn = VariantNorm.new(rc.oldType, tagType, [tagType], NO_FIELDS, tagField);
		vn.tagValue = V3.getVariantTag(rc.oldType);
		rc.raFacts |= RaFact.RC_ENUM;
		rc.variantNorm = vn;
		
		for (l = rc.children; l != null; l = l.tail) unboxUsingEnumVariantNorm(l.head, tagType, tagField);
	}
	private def fieldNorm(rf: RaField) -> TypeNorm {
		if (rf.typeNorm != null) return rf.typeNorm;
		else if (rf.fieldType != null) return rf.typeNorm = rn.norm(rf.fieldType);
		else return rn.norm(rf.orig.fieldType);
	}
}
