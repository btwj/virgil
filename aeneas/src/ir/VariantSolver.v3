// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class VariantNorm extends TypeNorm {
	def fields: Array<VariantField>;

	def tag: VariantField;
	var tagValue: int = -1;

	// for each field, this is the start + end index when ClassAlloc is called
	var fieldRanges: Array<(int, int)>;
	var children: List<VariantNorm>;

	new(oldType: Type, newType: Type, sub: Array<Type>, fields, tag)
		super(oldType, newType, sub) {}

	// represent empty variant as tag
	def isEnum() -> bool { return size == 1 && tag != null && fields.length == 0; }
	def isEnumCase() -> bool { return size == 1 && tag != null && tagValue >= 0 && fields.length == 0; }

	def tagType() -> IntType { return IntType.!(tag.tn.first()); }
	def tagIndex() -> int { return tag.indexes[0]; }
	
	// represent single-case, unboxed variant without its tag
	def isTagless() -> bool { return tag == null; }

	def render(buf: StringBuilder) -> StringBuilder {
		buf.put3("%q ## %q |%d|", oldType.render, newType.render, size);
		buf.puts(" [");
		for (i < sub.length) {
			if (i > 0) buf.csp();
			sub[i].render(buf);
		}
		buf.puts("] {");
		if (tag != null) {
			buf.put1("tag: %q", tag.render);
		}
		for (i < fields.length) {
			if (i > 0 || tag != null) buf.csp();
			fields[i].render(buf);
		}
		buf.puts("}");
		return buf;
	}
}

// Metadata about a variant's fields before/after normalization
class VariantField {
	def tn: TypeNorm;
	def indexes: Array<int>; // Indexes into the variant's representation to extract the field from

	new(tn, indexes) {}

	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts("(");
		for (i < indexes.length) {
			if (i > 0) buf.csp();
			buf.put1("#%d", indexes[i]);
		}
		buf.puts(")");
		if (tn != null) buf.put1(": [%q]", tn.newType.render);
		return buf;
	}
}

def ON_STACK = -1;
def EMPTY_FIELD = VariantField.new(null, []);
def NO_FIELDS = Array<VariantField>.new(0);

private class ScalarSet(unifyFn: (Type, Type) -> Type) {
	def types = Vector<Type>.new();
	var used = Vector<bool>.new();

	def addScalar(t: Type) -> (Type, int) {
		for (i < types.length) {
			if (used[i]) continue;

			var supertype = unifyFn(t, types[i]);
			if (supertype != null) {
				used[i] = true;
				return (types[i] = supertype, i);
			}
		}
		types.put(t);
		used.put(true);
		return (t, types.length - 1);
	}
	def addField(tn: TypeNorm) -> Array<int> {
		if (tn.sub == null) return [addScalar(tn.newType).1];
		var arr = Array<int>.new(tn.size);
		for (i < tn.size) arr[i] = addScalar(tn.sub[i]).1;
		return arr;
	}
	def resetUsed() { for (i < used.length) used[i] = false; }
}

class VariantSolver(nc: NormalizerConfig, rn: ReachabilityNormalizer, verbose: bool) {
	// Normalizes a non-recursive variant, returns either a VariantNorm for an unboxed variant,
	// or a simple TypeNorm for a boxed variant
	def normVariant(t: Type, rc: RaClass) -> TypeNorm {
		if (rc.variantNorm != null) return rc.variantNorm;
		if (rc.orig.boxing == Boxing.BOXED) rn.mapSimple(t);

		var prev = rc.recursive;
		match (rc.recursive) {
			ON_STACK => {
				rc.recursive = 2; // cycle detected; box
			}
			0 => {
				rc.recursive = ON_STACK;
				tryUnboxing(rc);
				if (rc.recursive == ON_STACK) rc.recursive = 1;
				if (rc.variantNorm != null) return rc.variantNorm;
			}
		}
		return rn.mapSimple(t); 
	}
	// Try to unbox a variant in one of three ways:
	// 1. If a (non-closure) variant has all empty fields in all cases, represent it as a single uN tag (enum representation).
	// 2. If a variant has only one case, represent it as a tagless tuple of scalars (data representation).
	// 3. If a variant has multiple cases and is marked #unboxed, use a flattened representation with the smallest set of scalars.
	private def tryUnboxing(rc: RaClass) -> bool {
		if (rc.variantNorm != null) return true; // already done
		while (rc.parent != null) rc = rc.parent;
		
		rn.makeNormFields(rc);

		var isEmpty = rc.normFields.length == 0;
		var closure = rc.raFacts.RC_CLOSURE;

		for (l = rc.children; l != null; l = l.tail) {
			var c = l.head;
			rn.makeNormFields(c);
			if (c.normFields.length > 0) isEmpty = false;
			closure |= c.raFacts.RC_CLOSURE;
		}

		if (isEmpty && !closure) {
			// normalize empty variant to just its tag; i.e. become an enum
			var tagType = V3.getVariantTagType(rc.oldType);
			var tagTypeNorm = rn.norm(tagType);
			var tagField = VariantField.new(tagTypeNorm, [0]);
			unboxUsingEnumVariantNorm(rc, tagType, tagField);
			return true;
		}
		if (rc.children != null) {
			// multi-case variant unboxing
			if (closure) return false;
			match (rc.orig.boxing) {
				BOXED, AUTO => return false;
				_ => return unboxUsingTaggedVariantNorm(rc);
			}
		}
		match (rc.orig.boxing) {
			BOXED => return false;
			AUTO => if (rc.normFields.length > nc.MaxFlatDataValues) return false;
			UNBOXED => ; // program specified unboxed; TODO: recursion or closure should be an error
		}
		if (rc.recursive > 1 || closure) return false; // recursive or closed over
		unboxUsingTaglessVariantNorm(rc);
		return true;
	}
	private def unboxUsingTaglessVariantNorm(rc: RaClass) {
		var ofs = rc.orig.fields;
		var fields = Array<VariantField>.new(ofs.length);
		var fieldRanges = Array<(int, int)>.new(ofs.length);

		var vecO = Vector<Type>.new();
		var vecT = Vector<Type>.new();

		for (i < ofs.length) {
			var normStart = vecT.length, origStart = vecO.length;
			var rf = rc.fields[i];
			var indexes: Array<int>;

			if (rf != null && rf.normIndex >= 0) {
				var tn = fieldNorm(rf);
				tn.addTo(vecT);

				indexes = Array<int>.new(tn.size);
				for (j < indexes.length) indexes[j] = normStart + j;
				fields[i] = VariantField.new(tn, indexes);
			} else fields[i] = EMPTY_FIELD;
			
			var fieldType = ofs[i].fieldType.substitute(V3.getTypeArgs(rc.oldType));
			rn.norm(fieldType).addTo(vecO);
			fieldRanges[i] = (origStart, vecO.length);
		}

		var ta = vecT.extract();
		var vn = VariantNorm.new(rc.oldType, Tuple.newType(Lists.fromArray(ta)), ta, fields, null);
		vn.fieldRanges = fieldRanges;
		rc.variantNorm = vn;

		if (verbose) Terminal.put1("variant norm %q\n", rc.variantNorm.render);
	}
	private def unboxUsingTaggedVariantNorm(rc: RaClass) -> bool {
		var vecT = Vector<Type>.new();
		var parentUnboxed = rc.orig.boxing == Boxing.UNBOXED;

		var scalars = ScalarSet.new(nc.UnifyRepresentations(rn.ra.compiler, rn.ra.prog, _, _));
		var cases: List<(Array<VariantField>, Array<(int, int)>)>;

		for (l = rc.children; l != null; l = l.tail) {
			var c = l.head;
			var ofs = c.orig.fields;

			var fields = Array<VariantField>.new(ofs.length);
			var fieldRanges = Array<(int, int)>.new(ofs.length);
			var vecO = Vector<Type>.new();

			scalars.resetUsed();
			for (i < ofs.length) {
				var rf = c.fields[i];

				if (rf != null && rf.normIndex >= 0) {
					var tn = fieldNorm(rf);
					var indexes = scalars.addField(tn);
					fields[i] = VariantField.new(tn, indexes);
				} else fields[i] = EMPTY_FIELD;

				var origStart = vecO.length;
				var fieldType = ofs[i].fieldType.substitute(V3.getTypeArgs(rc.oldType));
				rn.norm(fieldType).addTo(vecO);
				fieldRanges[i] = (origStart, vecO.length);
			}

			cases = List<(Array<VariantField>, Array<(int, int)>)>.new((fields, fieldRanges), cases);
		}

		if (rc.recursive > 1) return false;
		// now that we know it's not recursive, we can safely assign the variant norms

		cases = Lists.reverse(cases);

		var tagType = V3.getVariantTagType(rc.oldType);
		scalars.types.put(tagType);

		var types = scalars.types.extract();
		var tagField = VariantField.new(rn.norm(tagType), [types.length - 1]);
		var newType = Tuple.newType(Lists.fromArray(types));

		var parentNorm = VariantNorm.new(rc.oldType, newType, types, NO_FIELDS, tagField);
		var childrenNorms: List<VariantNorm>;
		rc.variantNorm = parentNorm;

		for (l = rc.children; l != null; l = l.tail) {
			var c = l.head;
			var vn = VariantNorm.new(c.oldType, newType, types, cases.head.0, tagField);
			vn.fieldRanges = cases.head.1;
			vn.tagValue = V3.getVariantTag(c.oldType);
			c.variantNorm = vn;
			childrenNorms = List<VariantNorm>.new(vn, childrenNorms);
			cases = cases.tail;
		}
		
		parentNorm.children = childrenNorms;
		return true;
	}
	private def unboxUsingEnumVariantNorm(rc: RaClass, tagType: IntType, tagField: VariantField) {
		var vn = VariantNorm.new(rc.oldType, tagType, [tagType], NO_FIELDS, tagField);
		vn.tagValue = V3.getVariantTag(rc.oldType);
		rc.raFacts |= RaFact.RC_ENUM;
		rc.variantNorm = vn;
		
		for (l = rc.children; l != null; l = l.tail) {
			unboxUsingEnumVariantNorm(l.head, tagType, tagField);
		}
	}
	private def fieldNorm(rf: RaField) -> TypeNorm {
		if (rf.typeNorm != null) return rf.typeNorm;
		else if (rf.fieldType != null) return rf.typeNorm = rn.norm(rf.fieldType);
		else return rn.norm(rf.orig.fieldType);
	}
}
